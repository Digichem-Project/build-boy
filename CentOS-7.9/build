#!/usr/bin/env python3

import sys
import os
from pathlib import Path
import shutil
import subprocess

def expand_path(pth):
    """Perform shell-like expansion on a path."""
    pth = os.path.expanduser(pth)
    pth = os.path.expandvars(pth)
    return pth

def build_target(
    basedir,
    target = "CentOS-7.9",
    branch = "main"
):
    basedir = expand_path(basedir)

    # Switch to the build dir.
    os.chdir(Path(basedir, "freeze", target))

    # Cleanup any previous builds.
    shutil.rmtree("build", ignore_errors=True)
    shutil.rmtree("dist", ignore_errors=True)

    # Change branches.
    subprocess.run([
        'git', 'checkout', branch
    ], universal_newlines = True, check = True)

    # Get the latest version from git.
    subprocess.run([
        'git', 'pull', 'origin'
    ], universal_newlines = True, check = True)

    # Now build.
    subprocess.run([
        './freeze.' + target
    ], universal_newlines = True, check = True)

    # We should have two files in the 'dist' dir, the build folder and the archive.
    _paths = list(Path("dist").glob("*"))
    paths = {}

    for path in _paths:
        if path.is_dir():
            paths['dir'] = path.resolve()
        
        elif path.suffixes[-2:] == ['.tar', '.gz']:
            paths['archive'] = path.resolve()
    
    if len(paths) != 2:
        raise Exception("Build error, incorrect number of files in dist dir: {}".format(paths))
    
    return paths

def build_oprattle():
    """Build openprattle; a stand-in for openbabel"""
    return(build_target("~/openprattle"))

def main():
    # Disable git prompting.
    os.environ['GIT_TERMINAL_PROMPT'] = "0"
    build_oprattle()
    pass

# If we've been invoked as a program, call main().    
if __name__ == '__main__':
    sys.exit(main())
    
