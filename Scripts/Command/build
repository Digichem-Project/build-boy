#!/usr/bin/env python3
import sys
from pathlib import Path
import subprocess
import time

import fabric

# These are the virtual machines we're going to be building on.
vms = {
    'CentOS-7.9': {
        'target': 'CentOS-7.9',
        'vm': '8bd62c88-86aa-4faa-9b6d-71d5305280d7',
        'port': '2222'
    },
    'CentOS-8.5': {
        'target': 'CentOS-8.5',
        'vm': '4509aa09-d428-429a-bcfd-290672dbe6f3',
        'port': '2223'
    },
    'CentOS-Stream-8': {
        'target': 'CentOS-Stream-8',
        'vm': '21141559-9433-4107-b628-2e91b2c83640',
        'port': '2224'
    }
}

def do_build(vm_data):
    """"""
    try:
        # First, we need to wake up the VM.
        print("Waking VM...")
        subprocess.run([
            'vboxmanage', 'startvm', vm_data['vm'], "--type=headless"
        ], universal_newlines = True, check = True)

        # Wait a little bit for the VM to start.
        print("Waiting for boot...")
        time.sleep(120)

        # Next, connect with SSH.
        print("Connecting to VM...")
        with fabric.Connection(
            'localhost',
            user="digichem",
            port=vm_data['port'],
            # The PC just turned on, give it some time to wake-up:
            connect_kwargs = {
                "timeout": 300, # 5 mins.
                "banner_timeout": 300
            }
        ) as ssh:

            # Check for updates to the local build-boy script.
            print("Fetching updates...")
            ssh.run('cd build-boy && git fetch origin && git checkout main && git reset --hard origin/main')

            # Call the local build-boy build script.
            print("Running build...")
            ssh.run('cd build-boy/Scripts/' + vm_data['target'] + " && ./build")

            # All done, make the VM go to bed.
            print("Shutting down...")
            ssh.run("sudo shutdown now", warn = True)
    
    except:
        # Ask the VM to stop.
        subprocess.run([
           'vboxmanage', 'controlvm', vm_data['vm'], "acpipowerbutton"
        ], universal_newlines = True, check = False)

        time.sleep(10)

        # Make sure it is dead.
        subprocess.run([
           'vboxmanage', 'controlvm', vm_data['vm'], "poweroff"
        ], universal_newlines = True, check = False)

        raise

def main():
    for vm in vms.values():
        try:
            print("--------------------------------------")
            print("-              BUILD-BOY             -")
            print("--------------------------------------")
            print("Starting build for {}".format(vm['target']))
            print()
            do_build(vm)
        
        except Exception as e:
            print("Failed to build for VM: {}".format(vm['target']))
            print(e)


# If we've been invoked as a program, call main().    
if __name__ == '__main__':
    sys.exit(main())